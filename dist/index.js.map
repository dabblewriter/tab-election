{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["export type OnLeadership = (relinquish: Unsubscribe) => any;\nexport type Unsubscribe = () => void;\nexport type OnReceive = (msg: any) => void;\nexport type OnState<T> = (state: T) => void;\n\ninterface Deferred {\n  resolve: (value: any) => void;\n  reject: (reason?: any) => void;\n  timeout: number;\n}\n\nexport enum To {\n  All = 'all',\n  Others = 'others',\n  Leader = 'leader',\n}\n\nexport interface TabEventMap {\n  leadershipchange: Event;\n  message: MessageEvent;\n  state: MessageEvent;\n}\n\nexport interface Tab {\n  addEventListener<K extends keyof TabEventMap>(type: K, listener: (this: BroadcastChannel, ev: TabEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n  removeEventListener<K extends keyof TabEventMap>(type: K, listener: (this: BroadcastChannel, ev: TabEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/**\n * A Tab is an interfaces to synchronize state and messages between tabs. It uses BroadcastChannel and the Lock API.\n * This is a simplified version of the original implementation.\n */\nexport class Tab<T = Record<string, any>> extends EventTarget implements Tab {\n  relinquishLeadership = () => {};\n\n  private _name: string;\n  private _id: string;\n  private _hasLeaderCache: boolean;\n  private _hasLeaderChecking: Promise<boolean>;\n  private _callerId: string;\n  private _callDeferreds = new Map<number, Deferred>();\n  private _queuedCalls = new Map<number, { id: string; name: string; rest: any[] }>();\n  private _channel: BroadcastChannel;\n  private _isLeader = false;\n  private _isLeaderReady = false;\n  private _state: T;\n  private _callCount = 0;\n  private _api: any;\n  private _sentCalls = new Map<number, any>();\n\n  constructor(name = 'default') {\n    super();\n    this._name = name;\n    this._id = createTabId();\n    this._state = {} as T;\n    this._createChannel();\n    this.hasLeader().then(hasLeader => {\n      if (hasLeader) this._postMessage(To.Leader, 'onSendState', this._id);\n    });\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get isLeader() {\n    return this._isLeader;\n  }\n\n  hasLeader(): Promise<boolean> {\n    if (this._hasLeaderCache || this.isLeader) return Promise.resolve(true);\n    if (this._hasLeaderChecking) return this._hasLeaderChecking;\n\n    const check = () => navigator.locks.request(`tab-${this._name}`, { ifAvailable: true }, lock => lock === null);\n\n    return this._hasLeaderChecking = check().then(async (hasLeader) => {\n      if (!hasLeader) {\n        return false;\n      }\n\n      // bug in Chrome will sometimes handle this option lock request first before running the winner first. This is a\n      // workaround to make sure the winner runs first.\n      hasLeader = await check();\n      this._hasLeaderCache = hasLeader;\n      // wait to know when there is no longer a leader\n      navigator.locks.request(`tab-${this._name}`, () => this._hasLeaderCache = false);\n      this._hasLeaderChecking = null;\n      return hasLeader;\n    });\n  }\n\n  getCurrentCallerId() {\n    return this._callerId;\n  }\n\n  getState() {\n    return this._state;\n  }\n  setState(state: T) {\n    if (!this.isLeader) throw new Error('Only the leader can set state');\n    this._onState(state);\n    this._postMessage(To.Others, 'onState', state);\n  }\n\n  async waitForLeadership(onLeadership: OnLeadership): Promise<boolean> {\n    this.relinquishLeadership(); // Cancel any previous leadership requests\n    const abortController = new AbortController();\n    const { signal } = abortController;\n    this.relinquishLeadership = () => abortController.abort('Aborted');\n\n    try {\n      // The signal will cancel the lock request before a lock is attained, the promise.resolve will cancel it after\n      return await navigator.locks.request(`tab-${this._name}`, { signal }, async lock => {\n        this._isLeader = true;\n        // Never resolve until relinquishLeadership is called\n        const keepLockPromise = new Promise<boolean>(resolve => (this.relinquishLeadership = () => resolve(true)));\n        this._api = await onLeadership(this.relinquishLeadership);\n        this._isLeaderReady = true;\n        this._queuedCalls.forEach(({ id, name, rest }, callNumber) => this._onCall(id, callNumber, name, ...rest));\n        this._queuedCalls.clear();\n        this.dispatchEvent(new Event('leadershipchange'));\n        this._postMessage(To.Others, 'onLeader', this._state);\n        return keepLockPromise;\n      }).catch(e => e !== 'Aborted' && Promise.reject(e) || false);\n    } finally {\n      this._isLeader = false;\n      this._api = null;\n      this.dispatchEvent(new Event('leadershipchange'));\n    }\n  }\n\n  call<R>(name: string, ...rest: any[]): Promise<R> {\n    const callNumber = ++this._callCount;\n    return new Promise<R>(async (resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this._callDeferreds.delete(callNumber);\n        reject(new Error('Call timed out'));\n      }, 30_000);\n      this._callDeferreds.set(callNumber, { resolve, reject, timeout });\n      const hasLeader = await this.hasLeader();\n      if (this.isLeader && this._isLeaderReady) {\n        this._onCall(this._id, callNumber, name, ...rest);\n      } else if (!this.isLeader && hasLeader) {\n        // If the call isn't received by the leader within 500ms, assume the leader is dead and try again\n        const send = () => {\n          const t = setTimeout(() => this._sentCalls.has(callNumber) && send(), 500);\n          this._sentCalls.set(callNumber, t);\n          this._postMessage(To.Leader, 'onCall', this._id, callNumber, name, ...rest);\n        }\n        send();\n      } else {\n        this._queuedCalls.set(callNumber, { id: this._id, name, rest });\n      }\n    });\n  }\n\n  send(data: any, to: string | Set<string> = To.Others): void {\n    this._postMessage(to, 'onSend', data);\n  }\n\n  close(): void {\n    this.relinquishLeadership();\n    this._isLeader = false;\n    this._channel.close();\n    this._channel.onmessage = null;\n  }\n\n  _isToMe(to: string | Set<string>, sending?: boolean) {\n    if (!to) return false;\n    if (typeof to === 'string') {\n      // to \"All Except [id]\" is given as \"-[id]\", so if it's not me and I'm not sending, return true\n      if (to[0] === '-') return to.slice(1) !== this._id && !sending;\n      // If we're receiving a message to Others, it is to us, but if we're sending a message to Others, it's not to us\n      return (to === To.Leader && this._isLeader) || to === this._id || to === To.All || (to === To.Others && !sending);\n    }\n    return to.has(this._id);\n  }\n\n  _createChannel() {\n    this._channel = new BroadcastChannel(`tab-${this._name}`);\n    this._channel.onmessage = e => this._onMessage(e);\n  }\n\n  _postMessage(to: string | Set<string>, name: string, ...rest: any[]) {\n    // Don't send if there's no one to send to\n    if (!to || to instanceof Set && !to.size) return;\n    const data = { to, name, rest };\n    try {\n      this._channel.postMessage(data);\n      if (this._isToMe(to, true)) {\n        this._onMessage(new MessageEvent('message', { data }));\n      }\n    } catch (e) {\n      // If the channel is closed, create a new one and try again\n      if (e.name === 'InvalidStateError') {\n        this._createChannel();\n        this._postMessage(to, name, ...rest);\n      }\n    }\n  }\n\n  _onMessage(event: MessageEvent) {\n    const { to, name, rest } = event.data as { to: Set<string>; name: string; rest: any[] };\n    if (!this._isToMe(to)) return;\n    if (name === 'onCall') this._onCall.apply(this, rest);\n    else if (name === 'callReceived') this._callReceived.apply(this, rest);\n    else if (name === 'onReturn') this._onReturn.apply(this, rest);\n    else if (name === 'onState') this._onState.apply(this, rest);\n    else if (name === 'onSend') this._onSend.apply(this, rest);\n    else if (name === 'onSendState') this._onSendState.apply(this, rest);\n    else if (name === 'onLeader') this._onLeader.apply(this, rest);\n    else console.error('Unknown message', name, rest);\n  }\n\n  async _onCall(id: string, callNumber: number, name: string, ...rest: any[]) {\n    if (!this.isLeader) return;\n    this._postMessage(id, 'callReceived', callNumber);\n    if (!this._isLeaderReady) {\n      this._queuedCalls.set(callNumber, { id, name, rest });\n      return;\n    }\n    try {\n      if (typeof this._api?.[name] !== 'function') throw new Error(`Invalid API method \"${name}\"`);\n      this._callerId = id;\n      const promise = this._api[name](...rest);\n      this._callerId = undefined;\n      const results = await promise;\n      this._postMessage(id, 'onReturn', callNumber, null, results);\n    } catch (e) {\n      this._callerId = undefined;\n      this._postMessage(id, 'onReturn', callNumber, e);\n    }\n  }\n\n  _callReceived(callNumber: number) {\n    const t = this._sentCalls.get(callNumber);\n    if (t) {\n      clearTimeout(t);\n      this._sentCalls.delete(callNumber);\n    }\n  }\n\n  _onReturn(callNumber: number, error: any, results: any) {\n    if (this._sentCalls.get(callNumber)) this._callReceived(callNumber);\n    const deferred = this._callDeferreds.get(callNumber);\n    if (!deferred) return console.error('No deferred found for call', callNumber);\n    clearTimeout(deferred.timeout);\n    this._callDeferreds.delete(callNumber);\n    if (error) deferred.reject(error);\n    else deferred.resolve(results);\n  }\n\n  _onState(data: T) {\n    this._state = data;\n    this.dispatchEvent(new MessageEvent('state', { data }));\n  }\n\n  _onSend(data: any) {\n    this.dispatchEvent(new MessageEvent('message', { data }));\n  }\n\n  _onSendState(id: string) {\n    if (this.isLeader) {\n      this._postMessage(id, 'onState', this._state);\n    }\n  }\n\n  _onLeader(state: T) {\n    this._onState(state);\n    this._queuedCalls.forEach(({ id, name, rest }, callNumber) =>\n      this._postMessage(To.Leader, 'onCall', id, callNumber, name, ...rest)\n    );\n    this._queuedCalls.clear();\n  }\n}\n\nconst chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\nfunction createTabId() {\n  let id = '';\n  let length = 16;\n  while (length--) {\n    id += chars[(Math.random() * chars.length) | 0];\n  }\n  return id;\n}\n"]}