{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["const HEARTBEAT_INTERVAL = 1000;\nconst PING_TIMEOUT = 50;\n\nconst CLOSE = 'tabClose';\nconst PROMOTE = 'tabPromote';\nconst PING = 'ping';\nconst PONG = 'pong';\nconst ELECTION = 'election';\nconst CALL = 'call';\nconst RETURN = 'return';\nconst STATE = 'state';\nconst RECEIVE = 'receive';\nconst DONT_RECEIVE = {};\n\nexport type Callback = () => any;\nexport type Unsubscribe = () => void;\nexport type OnReceive = (msg: any) => void;\nexport type OnState<T> = (state: T) => void;\nexport interface Tab<T = Record<string, any>> {\n  call: <R>(name: string, ...rest: any) => Promise<R>;\n  send: (msg: any) => void;\n  onReceive: (listener: OnReceive) => Unsubscribe;\n  state(): T;\n  state(state: T): void;\n  onState: (listener: OnState<T>) => Unsubscribe;\n  close: () => void;\n}\n\nexport function waitForLeadership<T = any>(onLeadership?: Callback): Tab<T>;\nexport function waitForLeadership<T = any>(name: string, onLeadership?: Callback): Tab<T>;\nexport function waitForLeadership<T = any>(name: string | Callback, onLeadership?: Callback) {\n  if (typeof name !== 'string') {\n    onLeadership = name;\n    name = 'default';\n  }\n  const isSpectator = !onLeadership;\n  const id = createTabId();\n  const tabs = new Map([[ id, Date.now() ]]);\n  const onReceives = new Set<OnReceive>();\n  const onStates = new Set<OnState<T>>();\n  const callDeferreds = new Map<number, { resolve: (value: any) => void, reject: (reason?: any) => void, timeout: number }>();\n  let leaderId = '';\n  let heartbeatTimeout = 0;\n  let leaderState: T;\n  let channel: BroadcastChannel;\n  let callCount = 0;\n  let api: any;\n  createChannel();\n  self.addEventListener('beforeunload', close);\n  const callbacks = {\n    [PING]: onPing, [PONG]: onPong, [CLOSE]: onTabClose, [PROMOTE]: onTabPromote, [ELECTION]: onElection,\n    [CALL]: onCall, [RETURN]: onReturn, [STATE]: onUserState, [RECEIVE]: onUserMessage,\n  };\n  const call = <R>(name: string, ...rest: any) => {\n    if (!leaderId) return Promise.reject(new Error('No leader to call'));\n    return new Promise<R>((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        callDeferreds.delete(callCount);\n        reject(new Error('Call timed out'));\n      }, 30_000);\n      callDeferreds.set(++callCount, { resolve, reject, timeout });\n      if (isLeader()) onCall(id, callCount, name, ...rest);\n      else postMessage(CALL, id, callCount, name, ...rest, DONT_RECEIVE);\n    })\n  };\n  const send = (msg: any) => postMessage(RECEIVE, msg, DONT_RECEIVE);\n  const onReceive = (onReceive: OnReceive): Unsubscribe => {\n    onReceives.add(onReceive);\n    return () => onReceives.delete(onReceive);\n  }\n  const state = (state?: any) => {\n    if (state === undefined) return leaderState;\n    if (!isLeader()) return console.error('Only the leader can set state');\n    leaderState = state;\n    postMessage(STATE, state, DONT_RECEIVE);\n    onUserState(state);\n  };\n  const onState = (onState: OnState<T>): Unsubscribe => {\n    onStates.add(onState);\n    return () => onStates.delete(onState);\n  }\n  const tab = { id, leaderId, tabs, call, send, onReceive, state, onState, close };\n\n  // Start the heartbeat & initial ping to discover\n  if (isSpectator) {\n    postMessage(PING);\n  } else {\n    sendHeartbeat();\n  }\n\n  return tab;\n\n  function createChannel() {\n    channel = new BroadcastChannel(`tab-election-${name}`);\n    channel.addEventListener('message', onMessage);\n  }\n\n  function close() {\n    channel.removeEventListener('message', onMessage);\n    self.removeEventListener('beforeunload', close);\n    clearTimeout(heartbeatTimeout);\n    if (!isSpectator) postMessage(CLOSE, id);\n    if (leaderId === id) postMessage(ELECTION);\n    channel.close();\n  }\n\n  function isLeader() {\n    return leaderId === id;\n  }\n\n  function postMessage(name: string, ...rest: any[]) {\n    const data = { name, rest };\n    const sendSelf = rest[rest.length - 1] !== DONT_RECEIVE;\n    if (!sendSelf) rest.pop();\n    try {\n      channel.postMessage(data);\n      if (sendSelf) onMessage(new MessageEvent('message', { data }));\n    } catch (e) {\n      // If the channel is closed, create a new one and try again\n      if (e.name === 'InvalidStateError') {\n        createChannel();\n        postMessage(name, ...rest);\n      }\n    }\n  }\n\n  function onMessage(event: MessageEvent) {\n    const { name, rest } = event.data as { name: keyof typeof callbacks, rest: any[] };\n    callbacks[name].apply(null, rest);\n  }\n\n  function sendHeartbeat() {\n    const now = Date.now();\n    clearTimeout(heartbeatTimeout);\n    const nextInterval = HEARTBEAT_INTERVAL + Math.round(Math.random() * HEARTBEAT_INTERVAL * tabs.size);\n    heartbeatTimeout = setTimeout(() => sendHeartbeat(), nextInterval);\n\n    postMessage(PING, id, isLeader());\n    setTimeout(() => {\n      tabs.forEach((lastUpdated, id) => {\n        // If a tab is old (or an old record with a future date is stuck in localStorage), close it\n        if (lastUpdated < now) postMessage(CLOSE, id);\n      });\n      if (!leaderId || !tabs.has(leaderId)) {\n        postMessage(ELECTION);\n      }\n    }, PING_TIMEOUT);\n  }\n\n  function onPing(tabId: string, isTabLeader: boolean) {\n    if (isLeader() && leaderState !== undefined && !tabs.has(tabId)) {\n      postMessage(STATE, leaderState, DONT_RECEIVE); // When a new tab joins, send the leader state\n    }\n    if (!tabId) return; // Spectator tabs don't need to respond or to be responded to\n    const now = Date.now();\n    tabs.set(tabId, now);\n\n    if (tabId !== id && !isSpectator) {\n      postMessage(PONG, id, isLeader());\n    }\n    if (isTabLeader) tab.leaderId = leaderId = tabId;\n  }\n\n  function onPong(tabId: string, isTabLeader: boolean) {\n    tabs.set(tabId, Date.now());\n    if (isTabLeader) tab.leaderId = leaderId = tabId;\n  }\n\n  function onElection() {\n    tab.leaderId = leaderId = '';\n    const maxId = Array.from(tabs.keys()).sort().pop();\n\n    // if we think we should be the leader because our id is the max, send a message\n    if (id === maxId && !isSpectator) {\n      postMessage(PROMOTE, id);\n      onTabPromote(id);\n    }\n  }\n\n  async function onCall(id: string, callNumber: number, name: string, ...rest: any[]) {\n    if (!isLeader()) return;\n    try {\n      if (typeof api?.[name] !== 'function') throw new Error('Invalid API method');\n      const results = await api[name](...rest);\n      postMessage(RETURN, id, callNumber, null, results);\n    } catch (e) {\n      postMessage(RETURN, id, callNumber, e);\n    }\n  }\n\n  function onReturn(forTab: string, callNumber: number, error: any, results: any) {\n    if (id !== forTab) return;\n    const deferred = callDeferreds.get(callNumber);\n    if (!deferred) return console.error('No deferred found for call', callNumber);\n    clearTimeout(deferred.timeout);\n    callDeferreds.delete(callNumber);\n    if (error) deferred.reject(error);\n    else deferred.resolve(results);\n  }\n\n  function onUserMessage(msg: any) {\n    onReceives.forEach(listener => listener(msg));\n  }\n\n  function onUserState(state: any) {\n    leaderState = state;\n    onStates.forEach(listener => listener(state));\n  }\n\n  function onTabClose(id: string) {\n    tabs.delete(id);\n  }\n\n  function onTabPromote(newLeaderId: string) {\n    if (!leaderId || leaderId < newLeaderId) {\n      tab.leaderId = leaderId = newLeaderId;\n    }\n    if (isSpectator) return;\n    setTimeout(() => {\n      if (isLeader() && onLeadership) {\n        // We won!\n        api = onLeadership();\n        onLeadership = null; // Don't let it get called multiple times\n      }\n    }, PING_TIMEOUT);\n  }\n}\n\nconst chars = (\n  '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n).split('');\n\nfunction createTabId() {\n  let id = '';\n  let length = 16;\n  while (length--) {\n    id += chars[Math.random() * chars.length | 0];\n  }\n  return id;\n}\n"]}